{"ts":1358254642311,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var SingleValueViewModel = (function(){\n\n\tvar constructor = function(sheetEntity, hostingSheet){\n\t\tvar self = this;\n\t\tvar valueObject = sheetEntity.valueSource;\n\t\t\n\t\t//public properties\n\t\tself.position      = ko.observable(sheetEntity.position);\n\t\tself.value         = ko.observable(valueObject.Value());\n\t\tself.definition    = ko.observable(valueObject.Definition());\n\t\tself.requestedName = ko.observable();\n\t\tself.isEditing     = ko.observable(true);\n\n\n\t\t//Subscribe to model events\n\t\tvalueObject.bind('valueChanged', function(newValue){\n\t\t\tself.value(newValue);\n\t\t});\n\n\t\t\n\t\t// Update the model when our observables change\n\t\tself.definition.subscribe(function(newDefinitionValue){\n\t\t\tvalueObject.Definition(newDefinitionValue);\n\t\t});\n\n\t\tself.requestedName.subscribe(function(name){\n\t\t\thostingSheet.trySetName(sheetEntity, name);\n\t\t});\n\n\t\t\n\t\t//public methods\n\t\tself.startEditing = function(data, event){\n\t\t\tself.isEditing(true);\n\t\t\tself.trigger('startedEditing',self);\n\t\t};\n\n\t\tself.keypressed = function(data, event){\n\t\t\tif(event.keyCode == 13)\n\t\t\t{\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tself.isEditing(false);\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t};\n\n\tMicroEvent.mixin(constructor);\n\treturn constructor;\n})();\n\n\nvar SheetVM = (function(){\n\n\treturn function(sheetModel){\n\t\tvar self = this;\n\t\tvar sheet = sheetModel;\n\t\t\n\n\t\t//public properties\n\t\tself.items = ko.observableArray();\n\t\tself.nameAssignments = ko.observableArray();\n\n\n\t\t//subscribe to model events\n\t\tsheet.bind('itemAdded', function(newItem){\n\t\t\tvar itemVM = new SingleValueViewModel(newItem, sheet);\n\n\t\t\titemVM.bind('startedEditing', onActiveItemChanged);\n\t\t\titemVM.requestedName.subscribe(function(newName){\n\t\t\t\tsheet.trySetName(newItem, newName)\n\t\t\t});\n\n\t\t\titemVM.name = ko.computed(function(){\n\t\t\t\tvar namesForThisItem = self.nameAssignments().filter(function(assignment){return assignment.item == newItem});\n\t\t\t\tif(namesForThisItem.length > 0)\n\t\t\t\t\treturn namesForThisItem[0].name;\n\t\t\t\treturn\n\t\t\t\t\tundefined;\n\t\t\t},itemVM);\n\n\t\t\tself.items.push(itemVM);\n\t\t\tonActiveItemChanged(itemVM);\n\t\t});\n\n\t\tsheet.bind('nameAssigned', function(nameRecord){\n\t\t\tvar existingNameRecordsForItem = self.nameAssignments().filter(function(assigment){return assigment.item == nameRecord.item});\n\t\t\tself.nameAssignments.removeAll(existingNameRecordsForItem);\n\t\t\t\t\t\n\t\t\tself.nameAssignments.push(nameRecord);\n\t\t\t\n\t\t});\n\t\t\n\n\t\t//public methods\n\t\tself.addItemAtPosition = function(position){\n\t\t\tvar svs = new SingleValueSource(new SimpleEvaluator()); //note: this should be done by the sheet, or something in core\n\t\t\tvar item = new SheetElement(svs, position);\n\t\t\t\n\t\t\tsheet.addItem(item);\n\t\t};\n\n\t\tself.clicked = function(data, event){\n\t\t\tvar vmForClickTarget = ko.dataFor(event.target);\n\t\t\tif(vmForClickTarget.sheet != self)\n\t\t\t\treturn; //We are only interested in clicks directly on sheet, not events bubbling up\n\n\t\t\tvar pos = {x:event.pageX + \"px\", y:event.pageY + \"px\"};\n\t\t\tself.addItemAtPosition(pos);\n\t\t}\n\n\n\t\t//private methods\n\t\tvar onActiveItemChanged = function(newActiveItem){\t\t\n\t\t\tvar itemsToDeactivate = self.items().filter(function(item){\n\t\t\t\treturn item !== newActiveItem\n\t\t\t});\n\t\t\t\n\t\t\titemsToDeactivate.forEach(function(item){\n\t\t\t\titem.isEditing(false);\n\t\t\t});\n\t\t};\n\t}\n})();\n\n\n\nvar RootViewModel = (function(){\n\treturn function(){\n\t\tvar self = this;\n\n\t\tself.sheet = new SheetVM(new Sheet());\n\t};\n})();\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":3341}]],"length":3341}
{"contributors":[],"silentsave":false,"ts":1358254799684,"patch":[[{"diffs":[[0,"();\n"],[-1,"\t\tself.nameAssignments = ko.observableArray();\n"],[0,"\n\n\t\t"]],"start1":1362,"start2":1362,"length1":55,"length2":8},{"diffs":[[0,"\n\n\t\t"],[-1,"sheet.bind('nameAssigned', function(nameRecord){\n\t\t\tvar existingNameRecordsForItem = self.nameAssignments().filter(function(assigment){return assigment.item == nameRecord.item});\n\t\t\tself.nameAssignments.removeAll(existingNameRecordsForItem);\n\t\t\t\t\t\n\t\t\tself.nameAssignments.push(nameRecord);\n\t\t\t\n\t\t});\n\t\t\n"],[0,"\n\t\t/"]],"start1":1994,"start2":1994,"length1":311,"length2":8}]],"length":2991,"saved":false}
{"ts":1358255112831,"patch":[[{"diffs":[[0,"newValue);\n\t\t});"],[1,"\n        \n        hostingSheet.bind('nameAssigned', function(nameRecord){\n            if(nameRecord.item == sheetEntity)\n            {\n                self.name(nameRecord.name);\n            }\n            \n\t\t});"],[0,"\n\n\t\t\n\t\t// Update"]],"start1":554,"start2":554,"length1":32,"length2":243}]],"length":3202,"saved":false}
{"ts":1358255877968,"patch":[[{"diffs":[[0,"\n\n\t\t"],[-1,"\titemVM.name = ko.computed(function(){\n\t\t\t\tvar namesForThisItem = self.nameAssignments().filter(function(assignment){return assignment.item == newItem});\n\t\t\t\tif(namesForThisItem.length > 0)\n\t\t\t\t\treturn namesForThisItem[0].name;\n\t\t\t\treturn\n\t\t\t\t\tundefined;\n\t\t\t},itemVM);\n\n\t\t\t"],[1,"    "],[0,"self"]],"start1":1866,"start2":1866,"length1":281,"length2":12}]],"length":2933,"saved":false}
{"ts":1358255930721,"patch":[[{"diffs":[[0,"able();\n"],[1,"        self.name          = ko.observable();\n"],[0,"\t\tself.i"]],"start1":401,"start2":401,"length1":16,"length2":62}]],"length":2979,"saved":false}
