{"ts":1358255182791,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"module(\"SingleValueViewModel Tests\");\ntest(\"SingleValueViewModel updates its value when its SingleValueSource changes its value\", function() {\n\t//Arrange\n\tvar svs = new SingleValueSource();\n\tsvs.Value(1);\n\tvar vm = new SingleValueViewModel({valueSource:svs});\n\tvar viewModelRaisedEvent = false;\n\tvm.value.subscribe(function(){viewModelRaisedEvent = true});\n\n\n\t//Act\n\tsvs.Value(2);\n\n\t//Assert\n\tok(viewModelRaisedEvent);\n\tequal(vm.value(), 2);\n})\n\ntest(\"Changing the definition on a SingleValueViewModel updates the definition on its SingleValueSource\", function() {\n\t//Arrange\n\tvar svs = new SingleValueSource();\n\tsvs.Definition(\"0\");\n\tvar vm = new SingleValueViewModel({valueSource:svs});\n\n\t//Act\n\tvm.definition(\"1\");\n\n\t//Assert\n\tequal(svs.Definition(), \"1\");\n})\n\ntest(\"Setting requestedName on a SingleValueViewModel causes it to call trySetName on the sheet it was constructed with, \",function(){\n\t//Arrange\n\tvar itemToAdd = new SheetElement(new SingleValueSource(), {x:0,y:0});\n\t\n\tvar functionWasCalled = false;\n\tvar itemPassedInFunction;\n\tvar nameRequestedInFunction;\n\tvar sheet = {trySetName:function(item, requestedName){\n\t\tfunctionWasCalled=true;\n\t\titemPassedInFunction = item;\n\t\tnameRequestedInFunction = requestedName;\n\t}};\n\n\tvar vm = new SingleValueViewModel(itemToAdd, sheet);\n\n\t//Act\n\tvm.requestedName(\"Foo\");\n\n\t//Assert\n\tok(functionWasCalled);\n\tstrictEqual(itemPassedInFunction, itemToAdd);\n\tstrictEqual(nameRequestedInFunction, \"Foo\");\n});\n\ntest(\"SingleValueViewModel name property takes its value from name assigment in sheetVM\", function(){\n\t//Arrange\n\tvar sheetModel = new Sheet();\n\tvar sheetVM = new SheetVM(sheetModel);\n\n\tvar item = new SheetElement(new SingleValueSource(), {x:0,y:0})\n\tsheetModel.addItem(item);\n\n\tvar itemVM = sheetVM.items()[0];\n\tequal(itemVM.name(), undefined);\n\n\t//Act\n\tvar chosenName = \"foo\";\n\tsheetModel.trySetName(item, chosenName);\n\n\t//Assert\t\n\tequal(itemVM.name(), chosenName);\n});\n\nmodule(\"SheetViewModel Tests\");\ntest(\"When the Sheet model adds an item, the SheetViewModel adds a corresponding ItemViewModel\", function(){\n\t//Arrange\n\tvar sheetModel = new Sheet();\n\tvar sheetVM = new SheetVM(sheetModel);\n\tvar vmRaisedEvent = false;\n\tsheetVM.items.subscribe(function(){vmRaisedEvent = true});\n\tequal(sheetVM.items().length, 0);\n\n\tvar itemToAdd = new SingleValueSource();\n\n\t//Act\n\tsheetModel.addItem({valueSource:itemToAdd});\n\n\t//Assert\n\tok(vmRaisedEvent);\n\tequal(sheetVM.items().length, 1);\n});\n\ntest(\"When sheet model raises nameAssigned for previously unnamed item, sheetVM adds name record to its nameAssignments collection\", function(){\n\t//Arrange\n\tvar sheet = new Sheet();\n\tvar item = new SheetElement(new SingleValueSource(), {x:0,y:0});\n\t\n\tvar sheetVM = new SheetVM(sheet);\n\tsheet.addItem(item);\n\n\t//Act\n\tsheet.trySetName(item, \"Foo\");\n\n\n\t//Assert\n\tequal(sheetVM.nameAssignments().length, 1);\n});\n\ntest(\"When sheet model raises nameAssigned for previously named item, sheetVM replaces name record in its nameAssignments collection\", function(){\n\t//Arrange\n\tvar sheet = new Sheet();\n\tvar item = new SheetElement(new SingleValueSource(), {x:0,y:0});\n\t\n\tvar sheetVM = new SheetVM(sheet);\n\tsheet.addItem(item);\n\tsheet.trySetName(item, \"Foo\");\n\n\n\t//Act\n\tsheet.trySetName(item, \"Bar\");\n\n\n\t//Assert\n\tequal(sheetVM.nameAssignments().length, 1);\n\tequal(sheetVM.nameAssignments()[0].name, \"Bar\");\n});\n\n"]],"start1":0,"start2":0,"length1":0,"length2":3345}]],"length":3345}
{"contributors":[],"silentsave":false,"ts":1358255410918,"patch":[[{"diffs":[[1,"var getSheetForTests = function(){\n    return new Sheet();\n}\n\n\n"],[0,"module(\"SingleVa"]],"start1":0,"start2":0,"length1":16,"length2":79},{"diffs":[[0,"() {\n\t//Arrange\n"],[1,"    var fakeSheet = getSheetForTests();\n"],[0,"\tvar svs = new S"]],"start1":201,"start2":201,"length1":32,"length2":72},{"diffs":[[0,"lue(1);\n"],[-1,""],[0,"\tvar vm "]],"start1":300,"start2":300,"length1":16,"length2":16},{"diffs":[[0,"rce:svs}"],[1,", fakeSheet"],[0,");\n\tvar "]],"start1":352,"start2":352,"length1":16,"length2":27}]],"length":3459,"saved":false}
{"ts":1358255442750,"patch":[[{"diffs":[[0,"nge\n"],[-1,"    var fakeSheet = getSheetForTests();\n"],[0,"\tvar"]],"start1":213,"start2":213,"length1":48,"length2":8},{"diffs":[[0,"s}, "],[-1,"fake"],[1,"get"],[0,"Sheet"],[1,"ForTests()"],[0,");\n\t"]],"start1":318,"start2":318,"length1":17,"length2":26}]],"length":3428,"saved":false}
{"ts":1358255458231,"patch":[[{"diffs":[[0,"rce:svs}"],[1,", getSheetForTests()"],[0,");\n\n\t//A"]],"start1":761,"start2":761,"length1":16,"length2":36}]],"length":3448,"saved":false}
{"ts":1358255642661,"patch":[[{"diffs":[[0,"heet = {"],[1,"\n        "],[0,"trySetNa"]],"start1":1181,"start2":1181,"length1":16,"length2":25},{"diffs":[[0,"ame){\n\t\t"],[1,"    "],[0,"function"]],"start1":1234,"start2":1234,"length1":16,"length2":20},{"diffs":[[0,"true;\n\t\t"],[1,"    "],[0,"itemPass"]],"start1":1264,"start2":1264,"length1":16,"length2":20},{"diffs":[[0,"item;\n\t\t"],[1,"    "],[0,"nameRequ"]],"start1":1299,"start2":1299,"length1":16,"length2":20},{"diffs":[[0,"dName;\n\t"],[-1,"}"],[1,"    },\n        bind:function(){}\n    "],[0,"};\n\n\tvar"]],"start1":1345,"start2":1345,"length1":17,"length2":53}]],"length":3505,"saved":false}
{"ts":1358256160095,"patch":[[{"diffs":[[0,"ent "],[-1,"i"],[1,"o"],[0,"n sheet"],[-1,"VM"],[0,"\", f"]],"start1":1688,"start2":1688,"length1":18,"length2":16},{"diffs":[[0,"del "],[-1,"raises nameAssigned for previously unnamed item, sheetVM adds name record to its nameAssignments collection"],[1,"assigns a name, view model for that item changes its name"],[0,"\", f"]],"start1":2619,"start2":2619,"length1":115,"length2":65},{"diffs":[[0,"m(item);"],[1,"\n    var itemVM = sheet.items()[0];"],[0,"\n\n\t//Act"]],"start1":2848,"start2":2848,"length1":16,"length2":51},{"diffs":[[0,"ual("],[-1,"sheetVM.nameAssignments().length, 1);\n});\n\ntest(\"When sheet model raises nameAssigned for previously named item, sheetVM replaces name record in its nameAssignments collection\", function(){\n\t//Arrange\n\tvar sheet = new Sheet();\n\tvar item = new SheetElement(new SingleValueSource(), {x:0,y:0});\n\t\n\tvar sheetVM = new SheetVM(sheet);\n\tsheet.addItem(item);\n\tsheet.trySetName(item, \"Foo\");\n\n\n\t//Act\n\tsheet.trySetName(item, \"Bar\");\n\n\n\t//Assert\n\tequal(sheetVM.nameAssignments().length, 1);\n\tequal(sheetVM.nameAssignments()[0].name, \"Bar"],[1,"itemVM.name(), \"Foo"],[0,"\");\n"]],"start1":2947,"start2":2947,"length1":536,"length2":27}]],"length":2979,"saved":false}
{"ts":1358256190681,"patch":[[{"diffs":[[0,"temVM = "],[-1,"s"],[1,"S"],[0,"heet"],[1,"VM"],[0,".items()"]],"start1":2866,"start2":2866,"length1":21,"length2":23}]],"length":2981,"saved":false}
{"ts":1358256309992,"patch":[[{"diffs":[[0,"sheet);\n"],[1,"    \n"],[0,"\tsheet.a"]],"start1":2827,"start2":2827,"length1":16,"length2":21},{"diffs":[[0,"temVM = "],[-1,"S"],[1,"s"],[0,"heetVM.i"]],"start1":2871,"start2":2871,"length1":17,"length2":17}]],"length":2986,"saved":false}
